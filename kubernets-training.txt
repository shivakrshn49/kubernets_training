
Amazon Linux instance

Username : ec2-user

# docker install
sudo yum install docker
# start the docker service
sudo service docker start
sudo chkconfig docker on
# add the user to docker group - https://docs.docker.com/engine/install/linux-postinstall/
sudo groupadd docker
sudo usermod -aG docker $USER
    sudo usermod -a -G docker ec2-user

docker run --rm --name dockertraining -d -p 80:80 apache

docker ps -a
docker rmi hello-world
docker rmi --force
docker pull ubuntu
docker pull ubuntu:18.04

docker run --rm --name dockertraining -d -p 80:80 apache
docker pause dockertraining
docker unpause dockertraining
docker stop dockertraining
docker run -d -p 80:8080 jenkins
docker logs < jenkins container id>
docker volume create jenkinshome
sudo cat /var/lib/docker/volumes/jenkinshome/_data/secrets/initialAdminPassword
docker volume ls
docker run -d -p 80:8080 -v jenkinshome:/var/jenkins_home jenkins/jenkins

docker top <container_id>
docker stats <container_id>
docker inspect <container_id>
docker volume inspect jenkinshome
docker inspect apache

docker exec 0f6d95f88de2 cat /var/jenkins_home/config.xml
docker exec 0f6d95f88de2 ps -aef
docker exec 0f6d95f88de2 uptime

docker run -it ubuntu:18.04 bash
apt-get update
apt-get install apache2
echo "testing manual image creation" > /var/www/html/index.html
apt-get install vim

vi run.sh
. /etc/apache2/envvars
mkdir -p /var/run/apache2
mkdir -p /var/lock/apache2
/usr/sbin/apache2 -D FOREGROUND
chmod 755 run.sh
chmod u+x run.sh

Commit an image
------------
docker commit bd0dd9881809 apachemanual

docker build -t apachemanualfinal .
docker stop <jenkins continer id>
docker run -d --rm -p 80:80 apachemanualfinal

Tag an image
---------------
docker tag <image_name_or_id> <docker_hub_id>/<new_image_name>

Login docker
------------------
docker login

push the docker image
--------------------
docker push <image_name>

docker run -d -p 5000:5000 --restart always --name registry registry:2
docker tag apache localhost:5000/apache
curl http://localhost:5000/v2/_catalog
docker push localhost:5000/apache

CMD
----
vi cmd/Dockerfile
    FROM busybox
    CMD ["ping","-c","4","www.google.com"]
docker build -t cmd cmd/
docker run cmd

ENTRY
-----
vi entry/Dockerfile
    FROM busybox
    CMD ENTRYPOINT ["ping","-c","4"]
docker build -t entry entry/
docker run entry

ENTRY and CMD
--------------
vi entry/Dockerfile
    FROM busybox
    ENTRYPOINT ["ping","-c","4"]
    CMD ["www.google.com"]

docker build -t entrycmd entry/
docker run entrycmd
docker run entrycmd www.microsoft.com

Get the env variables available in container
-------------------------------
docker run <image_id_or_name> env

Override en variables
------------------------
docker build -t env env/
docker run env env

docker run -e var3=<company_name> env env
docker run -e var3=<company_name> -e var2=test env env


docker run -d -p 80:80 apache
docker stats 2f6186fa1180

Memory allocation to docker container
------------------------
docker run --memory="256m" -d -p 80:80 apache
docker run --memory="256m" --cpus=0.5 -d -p 80:80 apache
docker inspect c86 | grep NanoCpus

Docker networks
-------------------
Run a container with particular host
    docker run -d --network host apache

Create a docker network
    docker network create --driver bridge netowrkA
    docker network create --driver bridge netowrkB
docker network ls
docker network inspect netowrkA

Run a container on netowrkA with busybox as image - web
    docker run -it --network netowrkA --name web busybox sh
Run a container on netowrkB with busybox as image - db
    docker run -it --network netowrkB --name db busybox sh
Run a container on netowrkA with busybox as image - app
    docker run -it --network netowrkA --name app busybox sh
Attach a container to avaialble netowrk
    docker network connect netowrkB app

Pinging the containers from each other
in WEB
    ping -c 4 172.18.0.3
    ping -c 4 172.19.0.2
IN DB
    ping -c 4 172.19.0.3
    ping -c 4 172.18.0.2
in APP
    ping -c 4 172.18.0.2
    ping -c 4 172.19.0.2

Create a container in certain network range
    docker network create --subnet=172.22.0.0/16 testnetwork
Assign an ip address to a container
    docker run -it --network testnetwork --ip 172.22.0.10 busybox sh

Install docker compose
--------------------------
sudo curl -L "https://github.com/docker/compose/releases/download/1.26.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
docker-compose --version


EKS - Elastic Kubernets service
AKS - AZure Kubernets service
GKE - Google Kubernets engine

ELK - Elastic Logstash Kibana
EFL - Elastic Fluentd Kibana


yum update -y
Enable security feature in centos/redhat
    sed -i s/^SELINUX=.*$/SELINUX=disabled/ /etc/selinux/config
set host name and restart
    hostnamectl set-hostname master.<company_name>training.com
    init 6
Enable Kubernets repository in package manager
    vi /etc/yum.repos.d/kubernetes.repo
        [kubernetes]
        name=Kubernetes
        baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
        enabled=1
        gpgcheck=1
        repo_gpgcheck=1
        gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
            https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
        yum install kubeadm docker
        systemctl restart docker && systemctl enable docker
        systemctl restart kubelet && systemctl enable kubelet
        kubeadm init
        Check the list of child nodes
            kubectl get nodes
        Make all the nodes as active and running
            kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"
        Get all the pos from all nodes
            kubectl get pods --all-namespaces

Connect to other machine
    vi key.pem
    chmod 600 key.pem
    ssh -i key.pem ubuntu@<your master server ip>

download kubectl
    curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.18.0/bin/windows/amd64/kubectl.exe
    https://storage.googleapis.com/kubernetes-release/release/v1.18.0/bin/windows/amd64/kubectl.exe

    
    cd C:\Users\s_bavandla\
    mkdir .kube
    cd .kube
    replace the config file with the output of kubeconfig from node server
        notepad config

    kubectl get nodes
    kubectl get pods --all-namespaces

    create two Users
        notepad user.yaml
            apiVersion: v1
            kind: ServiceAccount
            metadata:
            name: admin-user
            namespace: kube-system

        notepad role.yaml
            apiVersion: rbac.authorization.k8s.io/v1
            kind: ClusterRoleBinding
            metadata:
            name: admin-user
            roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: cluster-admin
            subjects:
            - kind: ServiceAccount
            name: admin-user
            namespace: kube-system

    Apply the above user with role to kubectl
        kubectl apply -f user.yaml
        kubectl apply -f role.yaml

    A token will be created for each and every user
        List the tokens
            kubectl -n kube-system get secret
        
        Get the token of a specific user
            kubectl -n kube-system describe secret admin-user-token-7fngf

        Run the kubectl server - Create a proxy
            kubectl proxy

Get the pods of a specific namespace
    kubectl -n kube-system get pods

Get the pods of a default namespace
    kubectl get pods

Get all the nodes connected to this cluster
    kubectl -n kube-system get nodes
    kubectl get nodes

Create the first deployment
    notepad first_deployment.yml
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                    name: nginx-deployment
                    labels:
                        app: nginx
                spec:
                    replicas: 4
                    selector:
                        matchLabels:
                            app: nginx
                    template:
                        metadata:
                            labels:
                                app: nginx
                        spec:
                            containers:
                            - name: nginxpod
                                image: nginx
                                ports:
                                - containerPort: 80
                ---
                apiVersion: v1
                kind: Service
                metadata:
                    name: webservice
                    labels:
                        app: nginx
                spec:
                    ports:
                    - port: 80
                        protocol: TCP
                    selector:
                        app: nginx
                    type: LoadBalancer

    Apply the deployment
        kubectl apply -f first_deployment.yml

List the deployments
    kubectl get deployments
    
    Detail information about deployment
        kubectl describe deployment/nginx-deployment

List the replica sets avaialble
    kubectl get rs
    
    Describe the replica set
        kubectl describe rs nginx-deployment-8574d46659

List the services
    kubectl get svc

Edit the deployment
    kubectl edit deploy/nginx-deployment

    Display the deployment file content in yml format
        kubectl get deploy/nginx-deployment -o yaml

Change the image name in the deployment
    kubectl set image deploy/nginx-deployment nginxpod=nginx:1.17.9

    Check the logs of above changes
        kubectl rollout status deploy/nginx-deployment

Scale a deployment from command line
    kubectl scale deploy/nginx-deployment --replicas=10

    Check the logs of above changes
        kubectl rollout status deploy/nginx-deployment

Rollback the deployment changes
    kubectl rollout undo deploy/nginx-deployment

List rollout history
    kubectl rollout history deployment/nginx-deployment

Update the change cause for the deployment
    kubectl --record deployment/nginx-deployment set image nginxpod=1.18

Get details about specific revision
    kubectl rollout history deployment/nginx-deployment --revision=4

Rollback to a particular version
    kubectl rollout undo deploy/nginx-deployment --to-revision=7

Pause and resume a deployment
    kubectl rollout pause deploy/nginx-deployment
    kubectl rollout resume deploy/nginx-deployment

Autoscale deployment
    kubectl autoscale deploy/nginx-deployment --min=6 --max=15 --cpu-percent=80

    Get horizontal pod autoscale info
        kubectl get hpa

    Edit Autoscale
        kubectl edit hpa/nginx-deployment

Get the pods of a specific namespace
    kubectl get pods -n kube-system
    

Get the logs of specific pods
    kubectl logs kubernetes-dashboard-59756dbcc8-qnmk2 -n kube-system

    Follow the log
        kubectl logs -f kubernetes-dashboard-59756dbcc8-qnmk2 -n kube-system

Execute commands inside the running pod
    kubectl exec <pod_name> -- <command>
    ex: kubectl exec <pod_name> -- ls -altr
    kubectl exec nginx-deployment-8574d46659-4pdfc -- ls -altr

Login to pod
    kubectl exec -it nginx-deployment-8574d46659-4pdfc -- sh

Delete the deployment and service
    kubectl delete -f deployments/first_deployment.yml

Flush the dns resolver cache locally
    ipconfig /flushdns

Get the cron jobs plan
    kubectl get cronjobs

    Get the individual jobs that are triggered with the above time settings
        kubectl get jobs

        Get the pods running for the individual job
            kubectl get pods --selector=job-name=<job name>

        Get the logs of a specific job
            kubectl logs jobs/testcronjob-1592542920

Delete a deployment
    kubectl.exe delete -f deployments/cron.yml

Login to redis container and go to redis client
    kubectl exec -it redis -- redis-cli
    CONFIG GET maxmemory
    CONFIG GET maxmemory-policy

Run a command on paritcular container inside a pod which has two containers running
    kubectl exec multicontainer -c datagenerator -- cat /html/index.html
    kubectl exec multicontainer -c datadisplayer -- cat /usr/share/nginx/html/index.html

Create a namespace
    kubectl create namespace monitoring

Filter in promotheus
    container_memory_usage_bytes{pod_name="calico-node-p5s98"}
    rate(container_memory_usage_bytes{namespace="monitoring"}[10m])
    rate(container_memory_usage_bytes{namespace="monitoring"}[1m])

Helm usage - (Helm is a package manager for Kubernets)
    helm create firsttemplate
    helm lint ./firsttemplate
    helm template ./firsttemplate
    helm install helmapp --dry-run ./firsttemplate
    helm install helmapp ./firsttemplate

    list the history of the deployment
        helm history helmapp
    
    Rollback to the version
        helm rollback helmapp 1
    
    Test the deployed application
        helm test helmapp
    
    List the deployed applications
        helm list

    Delete a particular deployment
        helm delete helmapp

download Istios
    curl -L https://git.io/getLatestIstio | ISTIO_VERSION=1.1.1 sh -
    export PATH="$PATH:/home/ubuntu/istio-1.1.1/bin"